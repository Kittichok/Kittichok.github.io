{"version":3,"sources":["components/CardLists/index.js","App.js","serviceWorker.js","index.js"],"names":["ReactGA","initialize","CardList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","loading","_this2","Tabletop","init","key","process","callback","googleData","sort","a","b","Date","date","setState","simpleSheet","react_default","createElement","className","Container","Row","lib_default","size","spinnerColor","spinnerWidth","visible","dataCards","colors","map","props","i","Card","body","inverse","color","CardHeader","topic","CardBody","CardText","remark","href","reference","Button","onClick","event","category","action","CardFooter","renderCards","React","Component","App","pageview","window","location","pathname","search","components_CardLists","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6gBASAA,IAAQC,WAAW,kBAEnB,IAoEeC,cA9CX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CAAEC,KAAM,GAAIC,SAAS,GAFzBT,mFAKM,IAAAU,EAAAP,KAIfQ,IAASC,KAAK,CACVC,IAAKC,+CACLC,SAAU,SAAAC,GACNA,EAAWC,KAAK,SAASC,EAAEC,GACvB,OAAO,IAAIC,KAAKD,EAAEE,MAAQ,IAAID,KAAKF,EAAEG,QAEzCX,EAAKY,SAAS,CAACd,KAAMQ,EAAYP,SAAS,KAE9Cc,aAAa,mFASjB,OACIC,EAAAN,EAAAO,cAAA,OAAKC,UAAU,aACfF,EAAAN,EAAAO,cAACE,EAAA,EAAD,KACIH,EAAAN,EAAAO,cAACG,EAAA,EAAD,KACIJ,EAAAN,EAAAO,cAAA,MAAIC,UAAU,eAAd,kBAEJF,EAAAN,EAAAO,cAACG,EAAA,EAAD,KACIJ,EAAAN,EAAAO,cAAA,OAAKC,UAAU,eACXF,EAAAN,EAAAO,cAACI,EAAAX,EAAD,CAASY,KAAM,IAAKC,aAAc,UAAWC,aAAc,GAAIC,QAAS9B,KAAKI,MAAME,WAxDvF,SAACyB,GAEjB,IAAIC,EAAS,CAAC,OAAQ,WACtB,OAAOD,EAAUE,IAAI,SAACC,EAAOC,GACzB,OACId,EAAAN,EAAAO,cAACc,EAAA,EAAD,CAAMC,MAAI,EAACC,SAAO,EAACC,MAAOP,EAAOG,EAAE,GAAIZ,UAAU,yBAC7CF,EAAAN,EAAAO,cAACkB,EAAA,EAAD,KAAaN,EAAMO,OACnBpB,EAAAN,EAAAO,cAACoB,EAAA,EAAD,KACIrB,EAAAN,EAAAO,cAACqB,EAAA,EAAD,KAAWT,EAAMU,QACjBvB,EAAAN,EAAAO,cAAA,KAAGuB,KAAMX,EAAMY,WACXzB,EAAAN,EAAAO,cAACyB,EAAA,EAAD,CAAQR,MAAM,OAAOS,QAAStD,IAAQuD,MAAM,CAC5CC,SAAU,OACVC,OAAQ,WAFR,UAMR9B,EAAAN,EAAAO,cAAC8B,EAAA,EAAD,KAAalB,EAAMhB,SA2CVmC,CAAYrD,KAAKI,MAAMC,gBAtCzBiD,IAAMC,WC5B7B7D,IAAQC,WAAW,kBAaJ6D,MAXf,WACE,OACInC,EAAAN,EAAAO,cAAA,OAAKC,UAAU,OACZ7B,IAAQ+D,SAASC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,QAC7DxC,EAAAN,EAAAO,cAAA,YACED,EAAAN,EAAAO,cAACwC,EAAD,SCCUC,QACW,cAA7BL,OAAOC,SAASK,UAEe,UAA7BN,OAAOC,SAASK,UAEhBN,OAAOC,SAASK,SAASC,MACvB,kECTNC,IAASC,OACD9C,EAAAN,EAAAO,cAAC8C,EAAD,MACFC,SAASC,eAAe,SDsHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e9ede275.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\nimport { Card, Button, CardText, CardFooter,\n    CardBody, CardHeader } from 'reactstrap';\nimport {Container, Row} from 'react-bootstrap';\nimport Spinner from 'react-spinner-material';\n\nimport ReactGA from 'react-ga';\nimport Tabletop from 'tabletop';\nReactGA.initialize('UA-141787668-1');\n\nconst renderCards = (dataCards) => {\n    // console.log(dataCards);\n    var colors = ['info', 'primary']\n    return dataCards.map((props, i) => {\n        return (\n            <Card body inverse color={colors[i%2]} className=\"Card-item text-center\">\n                <CardHeader>{props.topic}</CardHeader>\n                <CardBody>\n                    <CardText>{props.remark}</CardText>\n                    <a href={props.reference} >\n                        <Button color='dark' onClick={ReactGA.event({\n                        category: 'User',\n                        action: 'Click'\n                        })}>Link</Button>\n                    </a>\n                </CardBody>\n                <CardFooter>{props.date}</CardFooter>\n            </Card> )\n    })\n};\n\nclass CardList extends React.Component {\n    constructor(){\n        super()\n        this.state = { data: [], loading: true}\n    }\n\n    componentDidMount(){\n        if(process.env.NODE_ENV === \"development\"){\n            console.log(process.env.REACT_APP_G_KEY);\n        }\n        Tabletop.init({\n            key: process.env.REACT_APP_G_KEY,\n            callback: googleData => {\n                googleData.sort(function(a,b){\n                    return new Date(b.date) - new Date(a.date);\n                });\n                this.setState({data: googleData, loading: false})\n            },\n            simpleSheet: true\n        })\n    }\n\n    componentWillMount() {\n\n    }\n\n    render() {\n        return (\n            <div className='Card-list'>\n            <Container>\n                <Row>\n                    <h1 className='Center-text'>Journey of me</h1>\n                </Row>\n                <Row>\n                    <div className='Center-text'>\n                        <Spinner size={250} spinnerColor={\"#1ba8a4\"} spinnerWidth={10} visible={this.state.loading} />\n                    </div>\n                    {/* <CardDeck> */}\n                        {renderCards(this.state.data)}\n                    {/* </CardDeck> */}\n                </Row>\n            </Container>\n            </div>\n        )\n    }\n}\n\nexport default CardList;","import React from 'react';\nimport './App.css';\nimport CardList from './components/CardLists';\nimport ReactGA from 'react-ga';\nReactGA.initialize('UA-141787668-1');\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        {ReactGA.pageview(window.location.pathname + window.location.search)}\n        <body>\n          <CardList/>\n        </body>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//Card list\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n        <App />\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}