{"version":3,"sources":["components/CardLists/index.tsx","App.tsx","serviceWorker.tsx","index.tsx"],"names":["ReactGA","initialize","CardList","useState","data","loading","state","setState","useEffect","Tabletop","init","key","process","callback","googleData","simpleSheet","className","Container","Row","size","spinnerColor","spinnerWidth","visible","dataCards","colors","map","props","i","Card","body","inverse","color","CardHeader","topic","CardBody","CardText","remark","href","reference","Button","onClick","event","category","action","CardFooter","date","renderCards","App","pageview","window","location","pathname","search","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mfAgBAA,IAAQC,WAAW,kBAEnB,IAiJeC,EApGE,WAAO,IAAD,EACKC,mBAAiB,CACzCC,KAAM,GACNC,SAAS,IAHU,mBACdC,EADc,KACPC,EADO,KA4ErB,OAvEAC,qBAAU,WA2DRC,IAASC,KAAK,CACZC,IAAKC,+CACLC,SAAU,SAACC,GAITP,EAAS,CAAEH,KAAMU,EAAYT,SAAS,KAExCU,aAAa,MAEd,IAGD,yBAAKC,UAAU,aACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,wBAAIF,UAAU,eAAd,kBAEF,kBAACE,EAAA,EAAD,KACE,yBAAKF,UAAU,eACb,kBAAC,IAAD,CACEG,KAAM,IACNC,aAAc,UACdC,aAAc,GACdC,QAAShB,EAAMD,WArIT,SAACkB,GACnB,IAAIC,EAAS,CAAC,OAAQ,WACtB,OAAOD,EAAUE,KAAI,SAACC,EAAYC,GAChC,OACE,kBAACC,EAAA,EAAD,CACEjB,IAAKgB,EACLE,MAAI,EACJC,SAAO,EACPC,MAAOP,EAAOG,EAAI,GAClBX,UAAU,yBAEV,kBAACgB,EAAA,EAAD,KAAaN,EAAMO,OACnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAWT,EAAMU,QACjB,uBAAGC,KAAMX,EAAMY,WACb,kBAACC,EAAA,EAAD,CACER,MAAM,OACNS,QAAS,WACPxC,IAAQyC,MAAM,CACZC,SAAU,OACVC,OAAQ,YALd,UAaJ,kBAACC,EAAA,EAAD,KAAalB,EAAMmB,UA6GhBC,CAAYxC,EAAMF,UCvJ7BJ,IAAQC,WAAW,kBAWJ8C,MATf,WACE,OACE,yBAAK/B,UAAU,OACZhB,IAAQgD,SAASC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,QAC7D,kBAAC,EAAD,QCEcC,QACW,cAA7BJ,OAAOC,SAASI,UAEe,UAA7BL,OAAOC,SAASI,UAEhBL,OAAOC,SAASI,SAASC,MACvB,2D,OCTNC,IAASC,OACD,kBAAC,EAAD,MACFC,SAASC,eAAe,SDgIxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d88356ae.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './index.css';\nimport {\n  Card,\n  Button,\n  CardText,\n  CardFooter,\n  CardBody,\n  CardHeader,\n} from 'reactstrap';\nimport { Container, Row } from 'react-bootstrap';\nimport Spinner from 'react-spinner-material';\n\nimport ReactGA from 'react-ga';\n// @ts-ignore\nimport Tabletop from 'tabletop';\nReactGA.initialize('UA-141787668-1');\n\nconst renderCards = (dataCards: IMyGooglesheet[]) => {\n  var colors = ['info', 'primary'];\n  return dataCards.map((props: any, i) => {\n    return (\n      <Card\n        key={i}\n        body\n        inverse\n        color={colors[i % 2]}\n        className=\"Card-item text-center\"\n      >\n        <CardHeader>{props.topic}</CardHeader>\n        <CardBody>\n          <CardText>{props.remark}</CardText>\n          <a href={props.reference}>\n            <Button\n              color=\"dark\"\n              onClick={() => {\n                ReactGA.event({\n                  category: 'User',\n                  action: 'Click',\n                });\n              }}\n            >\n              Link\n            </Button>\n          </a>\n        </CardBody>\n        <CardFooter>{props.date}</CardFooter>\n      </Card>\n    );\n  });\n};\ninterface IMyGooglesheet {\n  topic: string;\n  remark: string;\n  reference: string;\n  date: string;\n  type: string;\n}\ninterface IState {\n  data: IMyGooglesheet[];\n  loading: boolean;\n}\n\nconst CardList = () => {\n  const [state, setState] = useState<IState>({\n    data: [],\n    loading: true,\n  });\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      setState({\n        data: [\n          {\n            topic: 'TDD',\n            remark: '',\n            reference: 'https://www.youtube.com/watch?v=q0wdEt1IMiY',\n            date: '2018-11-14',\n            type: 'information technology',\n          },\n          {\n            topic: 'Scrum master',\n            remark: '',\n            reference: 'https://www.youtube.com/watch?v=JNFeXBRqdsI',\n            date: '2018-11-20',\n            type: 'information technology',\n          },\n          {\n            topic: 'Retrospective',\n            remark: '',\n            reference: 'https://www.youtube.com/watch?v=ZP8c1PtAqO4&t=999s',\n            date: '2018-11-23',\n            type: 'information technology',\n          },\n          {\n            topic: 'Flutter',\n            remark: 'Try to build first andriod app with flutter',\n            reference: 'https://flutter.dev/docs/get-started/codelab',\n            date: '2019-05-13',\n            type: 'information technology',\n          },\n          {\n            topic: 'Github page',\n            remark: 'Github page with react',\n            reference:\n              'https://codeburst.io/deploy-react-to-github-pages-to-create-an-amazing-website-42d8b09cd4d',\n            date: '2019-05-16',\n            type: 'information technology',\n          },\n          {\n            topic: 'CI/CD Pipeline: A Gentle Introduction',\n            remark: '',\n            reference:\n              'https://dev.to/markoa/ci-cd-pipeline-a-gentle-intrâ€¦=email&utm_term=0_d8f11d5d1e-345e02f878-154991169',\n            date: '2019-05-20',\n            type: 'information technology',\n          },\n          {\n            topic: 'Travis CI',\n            remark: 'Use travis in this github page',\n            reference: 'https://travis-ci.org/Kittichok/website',\n            date: '2019-10-03',\n            type: 'CI/CD',\n          },\n        ],\n        loading: false,\n      });\n    }\n    Tabletop.init({\n      key: process.env.REACT_APP_G_KEY,\n      callback: (googleData: any) => {\n        // googleData.sort(function (a: any, b: any) {\n        //   return new Date(b.date) - new Date(a.date);\n        // });\n        setState({ data: googleData, loading: false });\n      },\n      simpleSheet: true,\n    });\n  }, []);\n\n  return (\n    <div className=\"Card-list\">\n      <Container>\n        <Row>\n          <h1 className=\"Center-text\">Journey of me</h1>\n        </Row>\n        <Row>\n          <div className=\"Center-text\">\n            <Spinner\n              size={250}\n              spinnerColor={'#1ba8a4'}\n              spinnerWidth={10}\n              visible={state.loading}\n            />\n          </div>\n          {/* <CardDeck> */}\n          {renderCards(state.data)}\n          {/* </CardDeck> */}\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\nimport './App.css';\nimport CardList from './components/CardLists';\nimport ReactGA from 'react-ga';\nReactGA.initialize('UA-141787668-1');\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {ReactGA.pageview(window.location.pathname + window.location.search)}\n      <CardList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//Card list\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n        <App />\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}