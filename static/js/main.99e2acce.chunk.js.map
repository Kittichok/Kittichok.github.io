{"version":3,"sources":["components/CardLists/data.csv","components/CardLists/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ReactGA","initialize","Promise","resolve","reject","lists","d3","data","push","date","reference","remark","topic","type","then","CardList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","_this2","Tabletop","init","key","callback","googleData","sort","a","b","Date","setState","simpleSheet","react_default","createElement","className","Container","Row","lib_default","size","spinnerColor","spinnerWidth","visible","dataCards","colors","map","props","i","Card","body","inverse","color","CardHeader","CardBody","CardText","href","target","Button","onClick","event","category","action","CardFooter","renderCards","React","Component","App","pageview","window","location","pathname","search","components_CardLists","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,ihBCWxCC,IAAQC,WAAW,kBAuBJ,IAAIC,QAAQ,SAACC,EAASC,GACjC,IAAIC,EAAQ,GACZC,IAAOC,IAAM,SAASA,GACfA,GACCF,EAAMG,KAAK,CACPC,KAAMF,EAAKE,KACXC,UAAWH,EAAKG,UAChBC,OAAQJ,EAAKI,OACbC,MAAOL,EAAKK,MACZC,KAAMN,EAAKM,SAGpBC,KAAK,WACJX,EAAQE,OAlChB,IAoFeU,cA3CX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CAAEhB,KAAM,GAAIiB,SAAS,GAFzBR,mFAKM,IAAAS,EAAAN,KACfO,IAASC,KAAK,CACVC,IAAK,+CACLC,SAAU,SAAAC,GACNA,EAAWC,KAAK,SAASC,EAAEC,GACvB,OAAO,IAAIC,KAAKD,EAAExB,MAAQ,IAAIyB,KAAKF,EAAEvB,QAEzCgB,EAAKU,SAAS,CAAC5B,KAAMuB,EAAYN,SAAS,KAE9CY,aAAa,mFASjB,OACIC,EAAAL,EAAAM,cAAA,OAAKC,UAAU,aACfF,EAAAL,EAAAM,cAACE,EAAA,EAAD,KACIH,EAAAL,EAAAM,cAACG,EAAA,EAAD,KACIJ,EAAAL,EAAAM,cAAA,MAAIC,UAAU,eAAd,kBAEJF,EAAAL,EAAAM,cAACG,EAAA,EAAD,KACIJ,EAAAL,EAAAM,cAAA,OAAKC,UAAU,eACXF,EAAAL,EAAAM,cAACI,EAAAV,EAAD,CAASW,KAAM,IAAKC,aAAc,UAAWC,aAAc,GAAIC,QAAS3B,KAAKI,MAAMC,WAxEvF,SAACuB,GAEjB,IAAIC,EAAS,CAAC,OAAQ,WACtB,OAAOD,EAAUE,IAAI,SAACC,EAAOC,GACzB,OACId,EAAAL,EAAAM,cAACc,EAAA,EAAD,CAAMC,MAAI,EAACC,SAAO,EAACC,MAAOP,EAAOG,EAAE,GAAIZ,UAAU,yBAC7CF,EAAAL,EAAAM,cAACkB,EAAA,EAAD,KAAaN,EAAMtC,OACnByB,EAAAL,EAAAM,cAACmB,EAAA,EAAD,KACIpB,EAAAL,EAAAM,cAACoB,EAAA,EAAD,KAAWR,EAAMvC,QACjB0B,EAAAL,EAAAM,cAAA,KAAGqB,KAAMT,EAAMxC,UAAWkD,OAAO,UAC7BvB,EAAAL,EAAAM,cAACuB,EAAA,EAAD,CAAQN,MAAM,OAAOO,QAAS9D,IAAQ+D,MAAM,CAC5CC,SAAU,OACVC,OAAQ,WAFR,UAMR5B,EAAAL,EAAAM,cAAC4B,EAAA,EAAD,KAAahB,EAAMzC,SA2DV0D,CAAYhD,KAAKI,MAAMhB,gBAnCzB6D,IAAMC,WCjD7BrE,IAAQC,WAAW,kBAaJqE,MAXf,WACE,OACIjC,EAAAL,EAAAM,cAAA,OAAKC,UAAU,OACZvC,IAAQuE,SAASC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,QAC7DtC,EAAAL,EAAAM,cAAA,YACED,EAAAL,EAAAM,cAACsC,EAAD,SCCUC,QACW,cAA7BL,OAAOC,SAASK,UAEe,UAA7BN,OAAOC,SAASK,UAEhBN,OAAOC,SAASK,SAASC,MACvB,kECTNC,IAASC,OACD5C,EAAAL,EAAAM,cAAC4C,EAAD,MACFC,SAASC,eAAe,SDsHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzE,KAAK,SAAA0E,GACjCA,EAAaC","file":"static/js/main.99e2acce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/data.ba546692.csv\";","import React from 'react';\r\nimport './index.css';\r\nimport { Card, Button, CardText, CardFooter,\r\n    CardBody, CardHeader, CardDeck } from 'reactstrap';\r\nimport {Container, Row} from 'react-bootstrap';\r\nimport Spinner from 'react-spinner-material';\r\n\r\nimport * as d3 from 'd3';\r\nimport data from './data.csv';\r\nimport ReactGA from 'react-ga';\r\nimport Tabletop from 'tabletop';\r\nReactGA.initialize('UA-141787668-1');\r\n\r\nconst renderCards = (dataCards) => {\r\n    // console.log(dataCards);\r\n    var colors = ['info', 'primary']\r\n    return dataCards.map((props, i) => {\r\n        return (\r\n            <Card body inverse color={colors[i%2]} className=\"Card-item text-center\">\r\n                <CardHeader>{props.topic}</CardHeader>\r\n                <CardBody>\r\n                    <CardText>{props.remark}</CardText>\r\n                    <a href={props.reference} target=\"_blank\">\r\n                        <Button color='dark' onClick={ReactGA.event({\r\n                        category: 'User',\r\n                        action: 'Click'\r\n                        })}>Link</Button>\r\n                    </a>\r\n                </CardBody>\r\n                <CardFooter>{props.date}</CardFooter>\r\n            </Card> )\r\n    })\r\n};\r\n\r\nvar loadData = new Promise((resolve, reject) => {\r\n    var lists = [];\r\n    d3.csv(data, function(data) { \r\n        if(data){\r\n            lists.push({\r\n                date: data.date,\r\n                reference: data.reference,\r\n                remark: data.remark,\r\n                topic: data.topic,\r\n                type: data.type\r\n            });\r\n        }\r\n    }).then(() => {\r\n        resolve(lists)\r\n    });\r\n})\r\n\r\nvar publicSpreadsheetUrl = 'https://docs.google.com/spreadsheets/d/1CJv1ZBVRoPpOraGaTg_N3L-PSf2mvQmUJVVS2KkSo3M/pubhtml'\r\n\r\nclass CardList extends React.Component {\r\n    constructor(){\r\n        super()\r\n        this.state = { data: [], loading: true}\r\n    }\r\n\r\n    componentDidMount(){\r\n        Tabletop.init({\r\n            key: '1CJv1ZBVRoPpOraGaTg_N3L-PSf2mvQmUJVVS2KkSo3M',\r\n            callback: googleData => {\r\n                googleData.sort(function(a,b){\r\n                    return new Date(b.date) - new Date(a.date);\r\n                });\r\n                this.setState({data: googleData, loading: false})\r\n            },\r\n            simpleSheet: true\r\n        })\r\n    }\r\n\r\n    componentWillMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='Card-list'>\r\n            <Container>\r\n                <Row>\r\n                    <h1 className='Center-text'>Journey of me</h1>\r\n                </Row>\r\n                <Row>\r\n                    <div className='Center-text'>\r\n                        <Spinner size={250} spinnerColor={\"#1ba8a4\"} spinnerWidth={10} visible={this.state.loading} />\r\n                    </div>\r\n                    {/* <CardDeck> */}\r\n                        {renderCards(this.state.data)}\r\n                    {/* </CardDeck> */}\r\n                </Row>\r\n            </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './App.css';\r\nimport CardList from './components/CardLists';\r\nimport ReactGA from 'react-ga';\r\nReactGA.initialize('UA-141787668-1');\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n        {ReactGA.pageview(window.location.pathname + window.location.search)}\r\n        <body>\r\n          <CardList/>\r\n        </body>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n//Card list\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n        <App />\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}